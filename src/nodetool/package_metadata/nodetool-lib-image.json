{
  "name": "nodetool-lib-image",
  "description": "Nodetool Image nodes",
  "version": "0.6.0",
  "authors": [
    "Matthias Georgi <matti.georgi@gmail.com>"
  ],
  "repo_id": "nodetool-ai/nodetool-lib-image",
  "nodes": [
    {
      "title": "Combine Image Grid",
      "description": "Combine a grid of image tiles into a single image.\n    image, grid, combine, tiles\n\n    Use cases:\n    - Reassemble processed image chunks\n    - Create composite images from smaller parts\n    - Merge tiled image data from distributed processing",
      "namespace": "lib.grid",
      "node_type": "lib.grid.CombineImageGrid",
      "layout": "default",
      "properties": [
        {
          "name": "tiles",
          "type": {
            "type": "list",
            "type_args": [
              {
                "type": "image"
              }
            ]
          },
          "default": [],
          "title": "Tiles",
          "description": "List of image tiles to combine."
        },
        {
          "name": "columns",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Columns",
          "description": "Number of columns in the grid.",
          "min": 0.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "tiles",
        "columns"
      ],
      "is_dynamic": false
    },
    {
      "title": "Slice Image Grid",
      "description": "Slice an image into a grid of tiles.\n    image, grid, slice, tiles\n\n    Use cases:\n    - Prepare large images for processing in smaller chunks\n    - Create image puzzles or mosaic effects\n    - Distribute image processing tasks across multiple workers",
      "namespace": "lib.grid",
      "node_type": "lib.grid.SliceImageGrid",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to slice into a grid."
        },
        {
          "name": "columns",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Columns",
          "description": "Number of columns in the grid.",
          "min": 0.0
        },
        {
          "name": "rows",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Rows",
          "description": "Number of rows in the grid.",
          "min": 0.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "list",
            "type_args": [
              {
                "type": "image"
              }
            ]
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "columns",
        "rows"
      ],
      "is_dynamic": false
    },
    {
      "title": "Batch To List",
      "description": "Convert a batch image into a list of images.",
      "namespace": "lib.image",
      "node_type": "lib.image.BatchToList",
      "layout": "default",
      "properties": [
        {
          "name": "batch",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Batch",
          "description": "Batch of images"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "list",
            "type_args": [
              {
                "type": "image"
              }
            ]
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "batch"
      ],
      "is_dynamic": false
    },
    {
      "title": "Crop",
      "description": "Crop an image region.",
      "namespace": "lib.image",
      "node_type": "lib.image.Crop",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "Image to crop"
        },
        {
          "name": "left",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Left",
          "description": "Left",
          "min": 0.0
        },
        {
          "name": "top",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Top",
          "description": "Top",
          "min": 0.0
        },
        {
          "name": "right",
          "type": {
            "type": "int"
          },
          "default": 1,
          "title": "Right",
          "description": "Right",
          "min": 1.0
        },
        {
          "name": "bottom",
          "type": {
            "type": "int"
          },
          "default": 1,
          "title": "Bottom",
          "description": "Bottom",
          "min": 1.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "left",
        "top",
        "right",
        "bottom"
      ],
      "is_dynamic": false
    },
    {
      "title": "Fit",
      "description": "Resize and crop an image to fit the given size.",
      "namespace": "lib.image",
      "node_type": "lib.image.Fit",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "Image to fit"
        },
        {
          "name": "width",
          "type": {
            "type": "int"
          },
          "default": 512,
          "title": "Width",
          "description": "Target width",
          "min": 1.0
        },
        {
          "name": "height",
          "type": {
            "type": "int"
          },
          "default": 512,
          "title": "Height",
          "description": "Target height",
          "min": 1.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "width",
        "height"
      ],
      "is_dynamic": false
    },
    {
      "title": "Get Metadata",
      "description": "Return basic image metadata.",
      "namespace": "lib.image",
      "node_type": "lib.image.GetMetadata",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "Image to inspect."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "dict"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Image Output",
      "description": "Workflow output for images.",
      "namespace": "lib.image",
      "node_type": "lib.image.ImageOutput",
      "layout": "default",
      "properties": [
        {
          "name": "value",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Value",
          "description": "Image value"
        },
        {
          "name": "name",
          "type": {
            "type": "str"
          },
          "default": "",
          "title": "Name",
          "description": "The parameter name for the workflow."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "value"
      ],
      "is_dynamic": false
    },
    {
      "title": "Paste",
      "description": "Paste one image onto another.",
      "namespace": "lib.image",
      "node_type": "lib.image.Paste",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "Base image"
        },
        {
          "name": "paste",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Paste",
          "description": "Image to paste"
        },
        {
          "name": "left",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Left",
          "description": "Left position"
        },
        {
          "name": "top",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Top",
          "description": "Top position"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "paste"
      ],
      "is_dynamic": false
    },
    {
      "title": "Resize",
      "description": "Resize an image to specific dimensions.",
      "namespace": "lib.image",
      "node_type": "lib.image.Resize",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "Image to resize"
        },
        {
          "name": "width",
          "type": {
            "type": "int"
          },
          "default": 512,
          "title": "Width",
          "description": "Width",
          "min": 1.0
        },
        {
          "name": "height",
          "type": {
            "type": "int"
          },
          "default": 512,
          "title": "Height",
          "description": "Height",
          "min": 1.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "width",
        "height"
      ],
      "is_dynamic": false
    },
    {
      "title": "Save Image",
      "description": "Save an image reference.",
      "namespace": "lib.image",
      "node_type": "lib.image.SaveImage",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "Image to save."
        },
        {
          "name": "folder",
          "type": {
            "type": "folder"
          },
          "default": {},
          "title": "Folder",
          "description": "Target folder."
        },
        {
          "name": "name",
          "type": {
            "type": "str"
          },
          "default": "image.png",
          "title": "Name",
          "description": "File name"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Scale",
      "description": "Scale an image by a factor.",
      "namespace": "lib.image",
      "node_type": "lib.image.Scale",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "Image to scale"
        },
        {
          "name": "scale",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Scale",
          "description": "Scale factor",
          "min": 0.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "scale"
      ],
      "is_dynamic": false
    },
    {
      "title": "Circle",
      "description": "Generate SVG circle element.\n    svg, shape, vector, circle",
      "namespace": "lib.svg",
      "node_type": "lib.svg.Circle",
      "layout": "default",
      "properties": [
        {
          "name": "cx",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Cx",
          "description": "Center X coordinate"
        },
        {
          "name": "cy",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Cy",
          "description": "Center Y coordinate"
        },
        {
          "name": "radius",
          "type": {
            "type": "int"
          },
          "default": 50,
          "title": "Radius",
          "description": "Radius"
        },
        {
          "name": "fill",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#000000"
          },
          "title": "Fill",
          "description": "Fill color"
        },
        {
          "name": "stroke",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "none"
          },
          "title": "Stroke",
          "description": "Stroke color"
        },
        {
          "name": "stroke_width",
          "type": {
            "type": "int"
          },
          "default": 1,
          "title": "Stroke Width",
          "description": "Stroke width"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "cx",
        "cy",
        "radius",
        "fill",
        "stroke",
        "stroke_width"
      ],
      "is_dynamic": false
    },
    {
      "title": "Clip Path",
      "description": "Create clipping paths for SVG elements.\n    svg, clip, mask\n\n    Use cases:\n    - Mask parts of elements\n    - Create complex shapes through clipping\n    - Apply visual effects using masks",
      "namespace": "lib.svg",
      "node_type": "lib.svg.ClipPath",
      "layout": "default",
      "properties": [
        {
          "name": "clip_content",
          "type": {
            "type": "svg_element"
          },
          "title": "Clip Content",
          "description": "SVG element to use as clip path"
        },
        {
          "name": "content",
          "type": {
            "type": "svg_element"
          },
          "title": "Content",
          "description": "SVG element to clip"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "clip_content",
        "content"
      ],
      "is_dynamic": false
    },
    {
      "title": "SVG Document",
      "description": "Combine SVG elements into a complete SVG document.\n    svg, document, combine\n\n    Use cases:\n    - Combine multiple SVG elements into a single document\n    - Set document-level properties like viewBox and dimensions\n    - Export complete SVG documents",
      "namespace": "lib.svg",
      "node_type": "lib.svg.Document",
      "layout": "default",
      "properties": [
        {
          "name": "content",
          "type": {
            "type": "union",
            "type_args": [
              {
                "type": "str"
              },
              {
                "type": "svg_element"
              },
              {
                "type": "list",
                "type_args": [
                  {
                    "type": "svg_element"
                  }
                ]
              }
            ]
          },
          "default": [],
          "title": "Content",
          "description": "SVG content"
        },
        {
          "name": "width",
          "type": {
            "type": "int"
          },
          "default": 800,
          "title": "Width",
          "description": "Document width",
          "min": 1.0,
          "max": 4096.0
        },
        {
          "name": "height",
          "type": {
            "type": "int"
          },
          "default": 600,
          "title": "Height",
          "description": "Document height",
          "min": 1.0,
          "max": 4096.0
        },
        {
          "name": "viewBox",
          "type": {
            "type": "str"
          },
          "default": "0 0 800 600",
          "title": "Viewbox",
          "description": "SVG viewBox attribute"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "content",
        "width",
        "height",
        "viewBox"
      ],
      "is_dynamic": false
    },
    {
      "title": "Drop Shadow",
      "description": "Apply drop shadow filter to SVG elements.\n    svg, filter, shadow, effects",
      "namespace": "lib.svg",
      "node_type": "lib.svg.DropShadow",
      "layout": "default",
      "properties": [
        {
          "name": "std_deviation",
          "type": {
            "type": "float"
          },
          "default": 3.0,
          "title": "Std Deviation",
          "description": "Standard deviation for blur"
        },
        {
          "name": "dx",
          "type": {
            "type": "int"
          },
          "default": 2,
          "title": "Dx",
          "description": "X offset for shadow"
        },
        {
          "name": "dy",
          "type": {
            "type": "int"
          },
          "default": 2,
          "title": "Dy",
          "description": "Y offset for shadow"
        },
        {
          "name": "color",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#000000"
          },
          "title": "Color",
          "description": "Color for shadow"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "std_deviation",
        "dx",
        "dy",
        "color"
      ],
      "is_dynamic": false
    },
    {
      "title": "Ellipse",
      "description": "Generate SVG ellipse element.\n    svg, shape, vector, ellipse",
      "namespace": "lib.svg",
      "node_type": "lib.svg.Ellipse",
      "layout": "default",
      "properties": [
        {
          "name": "cx",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Cx",
          "description": "Center X coordinate"
        },
        {
          "name": "cy",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Cy",
          "description": "Center Y coordinate"
        },
        {
          "name": "rx",
          "type": {
            "type": "int"
          },
          "default": 100,
          "title": "Rx",
          "description": "X radius"
        },
        {
          "name": "ry",
          "type": {
            "type": "int"
          },
          "default": 50,
          "title": "Ry",
          "description": "Y radius"
        },
        {
          "name": "fill",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#000000"
          },
          "title": "Fill",
          "description": "Fill color"
        },
        {
          "name": "stroke",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "none"
          },
          "title": "Stroke",
          "description": "Stroke color"
        },
        {
          "name": "stroke_width",
          "type": {
            "type": "int"
          },
          "default": 1,
          "title": "Stroke Width",
          "description": "Stroke width"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "cx",
        "cy",
        "rx",
        "ry",
        "fill",
        "stroke",
        "stroke_width"
      ],
      "is_dynamic": false
    },
    {
      "title": "Gaussian Blur",
      "description": "Apply Gaussian blur filter to SVG elements.\n    svg, filter, blur, effects",
      "namespace": "lib.svg",
      "node_type": "lib.svg.GaussianBlur",
      "layout": "default",
      "properties": [
        {
          "name": "std_deviation",
          "type": {
            "type": "float"
          },
          "default": 3.0,
          "title": "Std Deviation",
          "description": "Standard deviation for blur"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "std_deviation"
      ],
      "is_dynamic": false
    },
    {
      "title": "Gradient",
      "description": "Create linear or radial gradients for SVG elements.\n    svg, gradient, color\n\n    Use cases:\n    - Add smooth color transitions\n    - Create complex color effects\n    - Define reusable gradient definitions",
      "namespace": "lib.svg",
      "node_type": "lib.svg.Gradient",
      "layout": "default",
      "properties": [
        {
          "name": "gradient_type",
          "type": {
            "type": "enum",
            "values": [
              "linearGradient",
              "radialGradient"
            ],
            "type_name": "nodetool.nodes.lib.svg.GradientType"
          },
          "default": "linearGradient",
          "title": "Gradient Type",
          "description": "Type of gradient"
        },
        {
          "name": "x1",
          "type": {
            "type": "float"
          },
          "default": 0,
          "title": "X1",
          "description": "Start X position (linear) or center X (radial)"
        },
        {
          "name": "y1",
          "type": {
            "type": "float"
          },
          "default": 0,
          "title": "Y1",
          "description": "Start Y position (linear) or center Y (radial)"
        },
        {
          "name": "x2",
          "type": {
            "type": "float"
          },
          "default": 100,
          "title": "X2",
          "description": "End X position (linear) or radius X (radial)"
        },
        {
          "name": "y2",
          "type": {
            "type": "float"
          },
          "default": 100,
          "title": "Y2",
          "description": "End Y position (linear) or radius Y (radial)"
        },
        {
          "name": "color1",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#000000"
          },
          "title": "Color1",
          "description": "Start color of gradient"
        },
        {
          "name": "color2",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#FFFFFF"
          },
          "title": "Color2",
          "description": "End color of gradient"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "gradient_type",
        "x1",
        "y1",
        "x2",
        "y2",
        "color1",
        "color2"
      ],
      "is_dynamic": false
    },
    {
      "title": "Line",
      "description": "Generate SVG line element.\n    svg, shape, vector, line",
      "namespace": "lib.svg",
      "node_type": "lib.svg.Line",
      "layout": "default",
      "properties": [
        {
          "name": "x1",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "X1",
          "description": "Start X coordinate"
        },
        {
          "name": "y1",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Y1",
          "description": "Start Y coordinate"
        },
        {
          "name": "x2",
          "type": {
            "type": "int"
          },
          "default": 100,
          "title": "X2",
          "description": "End X coordinate"
        },
        {
          "name": "y2",
          "type": {
            "type": "int"
          },
          "default": 100,
          "title": "Y2",
          "description": "End Y coordinate"
        },
        {
          "name": "stroke",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#000000"
          },
          "title": "Stroke",
          "description": "Stroke color"
        },
        {
          "name": "stroke_width",
          "type": {
            "type": "int"
          },
          "default": 1,
          "title": "Stroke Width",
          "description": "Stroke width"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "x1",
        "y1",
        "x2",
        "y2",
        "stroke",
        "stroke_width"
      ],
      "is_dynamic": false
    },
    {
      "title": "Path",
      "description": "Generate SVG path element.\n    svg, shape, vector, path",
      "namespace": "lib.svg",
      "node_type": "lib.svg.Path",
      "layout": "default",
      "properties": [
        {
          "name": "path_data",
          "type": {
            "type": "str"
          },
          "title": "Path Data",
          "description": "SVG path data (d attribute)"
        },
        {
          "name": "fill",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#000000"
          },
          "title": "Fill",
          "description": "Fill color"
        },
        {
          "name": "stroke",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "none"
          },
          "title": "Stroke",
          "description": "Stroke color"
        },
        {
          "name": "stroke_width",
          "type": {
            "type": "int"
          },
          "default": 1,
          "title": "Stroke Width",
          "description": "Stroke width"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "path_data",
        "fill",
        "stroke",
        "stroke_width"
      ],
      "is_dynamic": false
    },
    {
      "title": "Polygon",
      "description": "Generate SVG polygon element.\n    svg, shape, vector, polygon",
      "namespace": "lib.svg",
      "node_type": "lib.svg.Polygon",
      "layout": "default",
      "properties": [
        {
          "name": "points",
          "type": {
            "type": "str"
          },
          "title": "Points",
          "description": "Points in format 'x1,y1 x2,y2 x3,y3...'"
        },
        {
          "name": "fill",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#000000"
          },
          "title": "Fill",
          "description": "Fill color"
        },
        {
          "name": "stroke",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "none"
          },
          "title": "Stroke",
          "description": "Stroke color"
        },
        {
          "name": "stroke_width",
          "type": {
            "type": "int"
          },
          "default": 1,
          "title": "Stroke Width",
          "description": "Stroke width"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "points",
        "fill",
        "stroke",
        "stroke_width"
      ],
      "is_dynamic": false
    },
    {
      "title": "Rectangle",
      "description": "Generate SVG rectangle element.\n    svg, shape, vector, rectangle",
      "namespace": "lib.svg",
      "node_type": "lib.svg.Rect",
      "layout": "default",
      "properties": [
        {
          "name": "x",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "X",
          "description": "X coordinate"
        },
        {
          "name": "y",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Y",
          "description": "Y coordinate"
        },
        {
          "name": "width",
          "type": {
            "type": "int"
          },
          "default": 100,
          "title": "Width",
          "description": "Width"
        },
        {
          "name": "height",
          "type": {
            "type": "int"
          },
          "default": 100,
          "title": "Height",
          "description": "Height"
        },
        {
          "name": "fill",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#000000"
          },
          "title": "Fill",
          "description": "Fill color"
        },
        {
          "name": "stroke",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "none"
          },
          "title": "Stroke",
          "description": "Stroke color"
        },
        {
          "name": "stroke_width",
          "type": {
            "type": "int"
          },
          "default": 1,
          "title": "Stroke Width",
          "description": "Stroke width"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "x",
        "y",
        "width",
        "height",
        "fill",
        "stroke",
        "stroke_width"
      ],
      "is_dynamic": false
    },
    {
      "title": "SVG to Image",
      "description": "Create an SVG document and convert it to a raster image in one step.\n    svg, document, raster, convert\n\n    Use cases:\n    - Create and rasterize SVG documents in a single operation\n    - Generate image files from SVG elements\n    - Convert vector graphics to bitmap format with custom dimensions",
      "namespace": "lib.svg",
      "node_type": "lib.svg.SVGToImage",
      "layout": "default",
      "properties": [
        {
          "name": "content",
          "type": {
            "type": "union",
            "type_args": [
              {
                "type": "str"
              },
              {
                "type": "svg_element"
              },
              {
                "type": "list",
                "type_args": [
                  {
                    "type": "svg_element"
                  }
                ]
              }
            ]
          },
          "default": [],
          "title": "Content",
          "description": "SVG content"
        },
        {
          "name": "width",
          "type": {
            "type": "int"
          },
          "default": 800,
          "title": "Width",
          "description": "Document width",
          "min": 1.0,
          "max": 4096.0
        },
        {
          "name": "height",
          "type": {
            "type": "int"
          },
          "default": 600,
          "title": "Height",
          "description": "Document height",
          "min": 1.0,
          "max": 4096.0
        },
        {
          "name": "viewBox",
          "type": {
            "type": "str"
          },
          "default": "0 0 800 600",
          "title": "Viewbox",
          "description": "SVG viewBox attribute"
        },
        {
          "name": "scale",
          "type": {
            "type": "int"
          },
          "default": 1,
          "title": "Scale",
          "description": "Scale factor for rasterization",
          "min": 1.0,
          "max": 10.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "content",
        "width",
        "height",
        "viewBox",
        "scale"
      ],
      "is_dynamic": false
    },
    {
      "title": "Text",
      "description": "Add text elements to SVG.\n    svg, text, typography\n\n    Use cases:\n    - Add labels to vector graphics\n    - Create text-based logos\n    - Generate dynamic text content in SVGs",
      "namespace": "lib.svg",
      "node_type": "lib.svg.Text",
      "layout": "default",
      "properties": [
        {
          "name": "text",
          "type": {
            "type": "str"
          },
          "default": "",
          "title": "Text",
          "description": "Text content"
        },
        {
          "name": "x",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "X",
          "description": "X coordinate"
        },
        {
          "name": "y",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Y",
          "description": "Y coordinate"
        },
        {
          "name": "font_family",
          "type": {
            "type": "str"
          },
          "default": "Arial",
          "title": "Font Family",
          "description": "Font family"
        },
        {
          "name": "font_size",
          "type": {
            "type": "int"
          },
          "default": 16,
          "title": "Font Size",
          "description": "Font size"
        },
        {
          "name": "fill",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#000000"
          },
          "title": "Fill",
          "description": "Text color"
        },
        {
          "name": "text_anchor",
          "type": {
            "type": "enum",
            "values": [
              "start",
              "middle",
              "end"
            ],
            "type_name": "nodetool.nodes.lib.svg.SVGTextAnchor"
          },
          "default": "start",
          "title": "Text Anchor",
          "description": "Text anchor position"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "text",
        "x",
        "y",
        "font_family",
        "font_size",
        "fill",
        "text_anchor"
      ],
      "is_dynamic": false
    },
    {
      "title": "Transform",
      "description": "Apply transformations to SVG elements.\n    svg, transform, animation\n\n    Use cases:\n    - Rotate, scale, or translate elements\n    - Create complex transformations\n    - Prepare elements for animation",
      "namespace": "lib.svg",
      "node_type": "lib.svg.Transform",
      "layout": "default",
      "properties": [
        {
          "name": "content",
          "type": {
            "type": "svg_element"
          },
          "title": "Content",
          "description": "SVG element to transform"
        },
        {
          "name": "translate_x",
          "type": {
            "type": "float"
          },
          "default": 0,
          "title": "Translate X",
          "description": "X translation"
        },
        {
          "name": "translate_y",
          "type": {
            "type": "float"
          },
          "default": 0,
          "title": "Translate Y",
          "description": "Y translation"
        },
        {
          "name": "rotate",
          "type": {
            "type": "float"
          },
          "default": 0,
          "title": "Rotate",
          "description": "Rotation angle in degrees"
        },
        {
          "name": "scale_x",
          "type": {
            "type": "float"
          },
          "default": 1,
          "title": "Scale X",
          "description": "X scale factor"
        },
        {
          "name": "scale_y",
          "type": {
            "type": "float"
          },
          "default": 1,
          "title": "Scale Y",
          "description": "Y scale factor"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "svg_element"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "content",
        "translate_x",
        "translate_y",
        "rotate",
        "scale_x",
        "scale_y"
      ],
      "is_dynamic": false
    },
    {
      "title": "Blur",
      "description": "Apply a Gaussian blur effect to an image.\n    image, filter, blur\n\n    - Soften images or reduce noise and detail\n    - Make focal areas stand out by blurring surroundings\n    - Protect privacy by blurring sensitive information",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.Blur",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to blur."
        },
        {
          "name": "radius",
          "type": {
            "type": "int"
          },
          "default": 2,
          "title": "Radius",
          "description": "Blur radius.",
          "min": 0.0,
          "max": 128.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "radius"
      ],
      "is_dynamic": false
    },
    {
      "title": "Canny",
      "description": "Apply Canny edge detection to an image.\n    image, filter, edges\n\n    - Highlight areas of rapid intensity change\n    - Outline object boundaries and structure\n    - Enhance inputs for object detection and image segmentation",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.Canny",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to canny."
        },
        {
          "name": "low_threshold",
          "type": {
            "type": "int"
          },
          "default": 100,
          "title": "Low Threshold",
          "description": "Low threshold.",
          "min": 0.0,
          "max": 255.0
        },
        {
          "name": "high_threshold",
          "type": {
            "type": "int"
          },
          "default": 200,
          "title": "High Threshold",
          "description": "High threshold.",
          "min": 0.0,
          "max": 255.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "low_threshold",
        "high_threshold"
      ],
      "is_dynamic": false
    },
    {
      "title": "Contour",
      "description": "Apply a contour filter to highlight image edges.\n    image, filter, contour\n\n    - Extract key features from complex images\n    - Aid pattern recognition and object detection\n    - Create stylized contour sketch art effects",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.Contour",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to contour."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Convert To Grayscale",
      "description": "Convert an image to grayscale.\n    image, grayscale\n\n    - Simplify images for feature and edge detection\n    - Prepare images for shape-based machine learning\n    - Create vintage or monochrome aesthetic effects",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.ConvertToGrayscale",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to convert."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Emboss",
      "description": "Apply an emboss filter for a 3D raised effect.\n    image, filter, emboss\n\n    - Add texture and depth to photos\n    - Create visually interesting graphics\n    - Incorporate unique effects in digital artwork",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.Emboss",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to emboss."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Expand",
      "description": "Add a border around an image to increase its size.\n    image, border, expand\n\n    - Make images stand out by adding a colored border\n    - Create framed photo effects\n    - Separate image content from surroundings",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.Expand",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to expand."
        },
        {
          "name": "border",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Border",
          "description": "Border size.",
          "min": 0.0,
          "max": 512.0
        },
        {
          "name": "fill",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Fill",
          "description": "Fill color.",
          "min": 0.0,
          "max": 255.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "border",
        "fill"
      ],
      "is_dynamic": false
    },
    {
      "title": "Find Edges",
      "description": "Detect and highlight edges in an image.\n    image, filter, edges\n\n    - Analyze structural patterns in images\n    - Aid object detection in computer vision\n    - Detect important features like corners and ridges",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.FindEdges",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to find edges."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Get Channel",
      "description": "Extract a specific color channel from an image.\n    image, color, channel, isolate, extract\n\n    - Isolate color information for image analysis\n    - Manipulate specific color components in graphic design\n    - Enhance or reduce visibility of certain colors",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.GetChannel",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to get the channel from."
        },
        {
          "name": "channel",
          "type": {
            "type": "enum",
            "values": [
              "R",
              "G",
              "B"
            ],
            "type_name": "nodetool.nodes.lib.pillow.filter.ChannelEnum"
          },
          "default": "R",
          "title": "Channel"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "channel"
      ],
      "is_dynamic": false
    },
    {
      "title": "Invert",
      "description": "Invert the colors of an image.\n    image, filter, invert\n\n    - Create negative versions of images for visual effects\n    - Analyze image data by bringing out hidden details\n    - Preprocess images for operations that work better on inverted colors",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.Invert",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to adjust the brightness for."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Posterize",
      "description": "Reduce the number of colors in an image for a poster-like effect.\n    image, filter, posterize\n\n    - Create graphic art by simplifying image colors\n    - Apply artistic effects to photographs\n    - Generate visually compelling content for advertising",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.Posterize",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to posterize."
        },
        {
          "name": "bits",
          "type": {
            "type": "int"
          },
          "default": 4,
          "title": "Bits",
          "description": "Number of bits to posterize to.",
          "min": 1.0,
          "max": 8.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "bits"
      ],
      "is_dynamic": false
    },
    {
      "title": "Smooth",
      "description": "Apply smoothing to reduce image noise and detail.\n    image, filter, smooth\n\n    - Enhance visual aesthetics of images\n    - Improve object detection by reducing irrelevant details\n    - Aid facial recognition by simplifying images",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.Smooth",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to smooth."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Solarize",
      "description": "Apply a solarize effect to partially invert image tones.\n    image, filter, solarize\n\n    - Create surreal artistic photo effects\n    - Enhance visual data by making certain elements more prominent\n    - Add a unique style to images for graphic design",
      "namespace": "lib.pillow.filter",
      "node_type": "lib.pillow.filter.Solarize",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to solarize."
        },
        {
          "name": "threshold",
          "type": {
            "type": "int"
          },
          "default": 128,
          "title": "Threshold",
          "description": "Threshold for solarization.",
          "min": 0.0,
          "max": 255.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "threshold"
      ],
      "is_dynamic": false
    },
    {
      "title": "Adaptive Contrast",
      "description": "Applies localized contrast enhancement using adaptive techniques.\n    image, contrast, enhance\n\n    Use cases:\n    - Improve visibility in images with varying lighting conditions\n    - Prepare images for improved feature detection in computer vision",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.AdaptiveContrast",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to adjust the contrast for."
        },
        {
          "name": "clip_limit",
          "type": {
            "type": "float"
          },
          "default": 2.0,
          "title": "Clip Limit",
          "description": "Clip limit for adaptive contrast.",
          "min": 0.0,
          "max": 100.0
        },
        {
          "name": "grid_size",
          "type": {
            "type": "int"
          },
          "default": 8,
          "title": "Grid Size",
          "description": "Grid size for adaptive contrast.",
          "min": 1.0,
          "max": 64.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "clip_limit",
        "grid_size"
      ],
      "is_dynamic": false
    },
    {
      "title": "Auto Contrast",
      "description": "Automatically adjusts image contrast for enhanced visual quality.\n    image, contrast, balance\n\n    Use cases:\n    - Enhance image clarity for better visual perception\n    - Pre-process images for computer vision tasks\n    - Improve photo aesthetics in editing workflows",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.AutoContrast",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to adjust the contrast for."
        },
        {
          "name": "cutoff",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Cutoff",
          "description": "Represents the percentage of pixels to ignore at both the darkest and lightest ends of the histogram. A cutoff value of 5 means ignoring the darkest 5% and the lightest 5% of pixels, enhancing overall contrast by stretching the remaining pixel values across the full brightness range.",
          "min": 0.0,
          "max": 255.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "cutoff"
      ],
      "is_dynamic": false
    },
    {
      "title": "Brightness",
      "description": "Adjusts overall image brightness to lighten or darken.\n    image, brightness, enhance\n\n    Use cases:\n    - Correct underexposed or overexposed photographs\n    - Enhance visibility of dark image regions\n    - Prepare images for consistent display across devices",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.Brightness",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to adjust the brightness for."
        },
        {
          "name": "factor",
          "type": {
            "type": "union",
            "type_args": [
              {
                "type": "float"
              },
              {
                "type": "int"
              }
            ]
          },
          "default": 1.0,
          "title": "Factor",
          "description": "Factor to adjust the brightness. 1.0 means no change."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "factor"
      ],
      "is_dynamic": false
    },
    {
      "title": "Color",
      "description": "Adjusts color intensity of an image.\n    image, color, enhance\n\n    Use cases:\n    - Enhance color vibrancy in photographs\n    - Correct color imbalances in digital images\n    - Prepare images for consistent brand color representation",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.Color",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to adjust the brightness for."
        },
        {
          "name": "factor",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Factor",
          "description": "Factor to adjust the contrast. 1.0 means no change."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "factor"
      ],
      "is_dynamic": false
    },
    {
      "title": "Contrast",
      "description": "Adjusts image contrast to modify light-dark differences.\n    image, contrast, enhance\n\n    Use cases:\n    - Enhance visibility of details in low-contrast images\n    - Prepare images for visual analysis or recognition tasks\n    - Create dramatic effects in artistic photography",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.Contrast",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to adjust the brightness for."
        },
        {
          "name": "factor",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Factor",
          "description": "Factor to adjust the contrast. 1.0 means no change."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "factor"
      ],
      "is_dynamic": false
    },
    {
      "title": "Detail",
      "description": "Enhances fine details in images.\n    image, detail, enhance\n\n    Use cases:\n    - Improve clarity of textural elements in photographs\n    - Enhance visibility of small features for analysis\n    - Prepare images for high-resolution display or printing",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.Detail",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to detail."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Edge Enhance",
      "description": "Enhances edge visibility by increasing contrast along boundaries.\n    image, edge, enhance\n\n    Use cases:\n    - Improve object boundary detection for computer vision\n    - Highlight structural elements in technical drawings\n    - Prepare images for feature extraction in image analysis",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.EdgeEnhance",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to edge enhance."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Equalize",
      "description": "Enhances image contrast by equalizing intensity distribution.\n    image, contrast, histogram\n\n    Use cases:\n    - Improve visibility in poorly lit images\n    - Enhance details for image analysis tasks\n    - Normalize image data for machine learning",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.Equalize",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to equalize."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Rank Filter",
      "description": "Applies rank-based filtering to enhance or smooth image features.\n    image, filter, enhance\n\n    Use cases:\n    - Reduce noise while preserving edges in images\n    - Enhance specific image features based on local intensity\n    - Pre-process images for improved segmentation results",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.RankFilter",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to rank filter."
        },
        {
          "name": "size",
          "type": {
            "type": "int"
          },
          "default": 3,
          "title": "Size",
          "description": "Rank filter size.",
          "min": 1.0,
          "max": 512.0
        },
        {
          "name": "rank",
          "type": {
            "type": "int"
          },
          "default": 3,
          "title": "Rank",
          "description": "Rank filter rank.",
          "min": 1.0,
          "max": 512.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "size",
        "rank"
      ],
      "is_dynamic": false
    },
    {
      "title": "Sharpen",
      "description": "Enhances image detail by intensifying local pixel contrast.\n    image, sharpen, clarity\n\n    Use cases:\n    - Improve clarity of photographs for print or display\n    - Refine texture details in product photography\n    - Enhance readability of text in document images",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.Sharpen",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to sharpen."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Sharpness",
      "description": "Adjusts image sharpness to enhance or reduce detail clarity.\n    image, clarity, sharpness\n\n    Use cases:\n    - Enhance photo details for improved visual appeal\n    - Refine images for object detection tasks\n    - Correct slightly blurred images",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.Sharpness",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to adjust the brightness for."
        },
        {
          "name": "factor",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Factor",
          "description": "Factor to adjust the contrast. 1.0 means no change."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "factor"
      ],
      "is_dynamic": false
    },
    {
      "title": "Unsharp Mask",
      "description": "Sharpens images using the unsharp mask technique.\n    image, sharpen, enhance\n\n    Use cases:\n    - Enhance edge definition in photographs\n    - Improve perceived sharpness of digital artwork\n    - Prepare images for high-quality printing or display",
      "namespace": "lib.pillow.enhance",
      "node_type": "lib.pillow.enhance.UnsharpMask",
      "layout": "default",
      "properties": [
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to unsharp mask."
        },
        {
          "name": "radius",
          "type": {
            "type": "int"
          },
          "default": 2,
          "title": "Radius",
          "description": "Unsharp mask radius.",
          "min": 0.0,
          "max": 512.0
        },
        {
          "name": "percent",
          "type": {
            "type": "int"
          },
          "default": 150,
          "title": "Percent",
          "description": "Unsharp mask percent.",
          "min": 0.0,
          "max": 1000.0
        },
        {
          "name": "threshold",
          "type": {
            "type": "int"
          },
          "default": 3,
          "title": "Threshold",
          "description": "Unsharp mask threshold.",
          "min": 0.0,
          "max": 512.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image",
        "radius",
        "percent",
        "threshold"
      ],
      "is_dynamic": false
    },
    {
      "title": "Background",
      "description": "The Background Node creates a blank background.\n    image, background, blank, base, layer\n    This node is mainly used for generating a base layer for image processing tasks. It produces a uniform image, having a user-specified width, height and color. The color is given in a hexadecimal format, defaulting to white if not specified.\n\n    #### Applications\n    - As a base layer for creating composite images.\n    - As a starting point for generating patterns or graphics.\n    - When blank backgrounds of specific colors are required for visualization tasks.",
      "namespace": "lib.pillow.draw",
      "node_type": "lib.pillow.draw.Background",
      "layout": "default",
      "properties": [
        {
          "name": "width",
          "type": {
            "type": "int"
          },
          "default": 512,
          "title": "Width",
          "min": 1.0,
          "max": 4096.0
        },
        {
          "name": "height",
          "type": {
            "type": "int"
          },
          "default": 512,
          "title": "Height",
          "min": 1.0,
          "max": 4096.0
        },
        {
          "name": "color",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#FFFFFF"
          },
          "title": "Color"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "width",
        "height",
        "color"
      ],
      "is_dynamic": false
    },
    {
      "title": "Gaussian Noise",
      "description": "This node creates and adds Gaussian noise to an image.\n    image, noise, gaussian, distortion, artifact\n\n    The Gaussian Noise Node is designed to simulate realistic distortions that can occur in a photographic image. It generates a noise-filled image using the Gaussian (normal) distribution. The noise level can be adjusted using the mean and standard deviation parameters.\n\n    #### Applications\n    - Simulating sensor noise in synthetic data.\n    - Testing image-processing algorithms' resilience to noise.\n    - Creating artistic effects in images.",
      "namespace": "lib.pillow.draw",
      "node_type": "lib.pillow.draw.GaussianNoise",
      "layout": "default",
      "properties": [
        {
          "name": "mean",
          "type": {
            "type": "float"
          },
          "default": 0.0,
          "title": "Mean"
        },
        {
          "name": "stddev",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Stddev"
        },
        {
          "name": "width",
          "type": {
            "type": "int"
          },
          "default": 512,
          "title": "Width",
          "min": 1.0,
          "max": 1024.0
        },
        {
          "name": "height",
          "type": {
            "type": "int"
          },
          "default": 512,
          "title": "Height",
          "min": 1.0,
          "max": 1024.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "mean",
        "stddev",
        "width",
        "height"
      ],
      "is_dynamic": false
    },
    {
      "title": "Render Text",
      "description": "This node allows you to add text to images.\n    text, font, label, title, watermark, caption, image, overlay\n    This node takes text, font updates, coordinates (where to place the text), and an image to work with. A user can use the Render Text Node to add a label or title to an image, watermark an image, or place a caption directly on an image.\n\n    The Render Text Node offers customizable options, including the ability to choose the text's font, size, color, and alignment (left, center, or right). Text placement can also be defined, providing flexibility to place the text wherever you see fit.\n\n    #### Applications\n    - Labeling images in a image gallery or database.\n    - Watermarking images for copyright protection.\n    - Adding custom captions to photographs.\n    - Creating instructional images to guide the reader's view.",
      "namespace": "lib.pillow.draw",
      "node_type": "lib.pillow.draw.RenderText",
      "layout": "default",
      "properties": [
        {
          "name": "text",
          "type": {
            "type": "str"
          },
          "default": "",
          "title": "Text",
          "description": "The text to render."
        },
        {
          "name": "font",
          "type": {
            "type": "enum",
            "values": [
              "DejaVuSans-Bold.ttf",
              "DejaVuSans.ttf",
              "FreeSans.ttf",
              "Arial.ttf",
              "Times New Roman.ttf",
              "Helvetica.ttf",
              "Calibri.ttf",
              "Verdana.ttf",
              "Georgia.ttf",
              "Courier New.ttf",
              "Impact.ttf",
              "Comic Sans MS.ttf",
              "Tahoma.ttf",
              "Segoe UI.ttf",
              "SF Pro.ttf",
              "Menlo.ttf",
              "Monaco.ttf"
            ],
            "type_name": "nodetool.nodes.lib.pillow.draw.TextFont"
          },
          "default": "DejaVuSans.ttf",
          "title": "Font",
          "description": "The font to use."
        },
        {
          "name": "x",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "X",
          "description": "The x coordinate.",
          "min": 0.0
        },
        {
          "name": "y",
          "type": {
            "type": "int"
          },
          "default": 0,
          "title": "Y",
          "description": "The y coordinate.",
          "min": 0.0
        },
        {
          "name": "size",
          "type": {
            "type": "int"
          },
          "default": 12,
          "title": "Size",
          "description": "The font size.",
          "min": 1.0,
          "max": 512.0
        },
        {
          "name": "color",
          "type": {
            "type": "color"
          },
          "default": {
            "value": "#000000"
          },
          "title": "Color",
          "description": "The font color."
        },
        {
          "name": "align",
          "type": {
            "type": "enum",
            "values": [
              "left",
              "center",
              "right"
            ],
            "type_name": "nodetool.nodes.lib.pillow.draw.TextAlignment"
          },
          "default": "left",
          "title": "Align"
        },
        {
          "name": "image",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image",
          "description": "The image to render on."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "text",
        "font",
        "x",
        "y",
        "size",
        "color",
        "align",
        "image"
      ],
      "is_dynamic": false
    },
    {
      "title": "Blend",
      "description": "Blend two images with adjustable alpha mixing.\n    blend, mix, fade, transition\n\n    Use cases:\n    - Create smooth transitions between images\n    - Adjust opacity of overlays\n    - Combine multiple exposures or effects",
      "namespace": "lib.pillow.__init__",
      "node_type": "lib.pillow.__init__.Blend",
      "layout": "default",
      "properties": [
        {
          "name": "image1",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image1",
          "description": "The first image to blend."
        },
        {
          "name": "image2",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image2",
          "description": "The second image to blend."
        },
        {
          "name": "alpha",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Alpha",
          "description": "The mix ratio.",
          "min": 0.0,
          "max": 1.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image1",
        "image2",
        "alpha"
      ],
      "is_dynamic": false
    },
    {
      "title": "Composite",
      "description": "Combine two images using a mask for advanced compositing.\n    composite, mask, blend, layering\n\n    Use cases:\n    - Create complex image compositions\n    - Apply selective blending or effects\n    - Implement advanced photo editing techniques",
      "namespace": "lib.pillow.__init__",
      "node_type": "lib.pillow.__init__.Composite",
      "layout": "default",
      "properties": [
        {
          "name": "image1",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image1",
          "description": "The first image to composite."
        },
        {
          "name": "image2",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Image2",
          "description": "The second image to composite."
        },
        {
          "name": "mask",
          "type": {
            "type": "image"
          },
          "default": {},
          "title": "Mask",
          "description": "The mask to composite with."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "image"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "image1",
        "image2",
        "mask"
      ],
      "is_dynamic": false
    }
  ],
  "assets": [
    {
      "package_name": "nodetool-lib-image",
      "name": "Image Enhance.jpg",
      "path": ""
    }
  ],
  "examples": [
    {
      "id": "8977fd6012fb11f09c400000236298c1",
      "name": "Image Enhance",
      "description": "Improve image quality with basic enhancement tools like sharpening, contrast and color adjustment",
      "tags": [
        "image",
        "start"
      ]
    }
  ]
}